import Utils.Math.PackedFormats;

Texture2D<float> depthInTex;
SamplerState S; // linear sampler for downsampling depth on half res

Texture2D<uint> rayMinTex; // contains float values: use asfloat()
Texture2D<uint> rayMaxTex; // contains float values: use asfloat()

StructuredBuffer<uint> stratifiedIndices;
StructuredBuffer<uint> stratifiedLookUpTable;

StructuredBuffer<uint> materialAlphaTestLookup;

#define DEFAULT_DEPTH (NORMALIZE ? 1.0 : 3.40282347E+37F)

#define IMPLEMENTATION_DEFAULT 0
#define IMPLEMENTATION_COVERAGE_MASK 1
#define IMPLEMENTATION_RESERVOIR_SAMPLING 2

#ifndef sd_t
#define sd_t float2
#endif
#ifndef SD_USE_NORMALS
#define SD_USE_NORMALS 1
#endif
#if SD_USE_NORMALS
#define SD_NORMALS(x) x
#else
#define SD_NORMALS(x)
#endif

// Hash function from "Improved Alpha Testing Using Hashed Sampling"
float hash(float2 v)
{
    return frac(1.0e4 * sin(17.0 * v.x + 0.1 * v.y) * (0.1 + abs(sin(13.0 * v.y + v.x))));
}

// 3D hash function from "Improved Alpha Testing Using Hashed Sampling"
float hash3D(float3 v)
{
    return hash(float2(hash(v.xy), v.z));
}

// 4D hash function based on the 3D hash function
float hash4D(float4 v)
{
    return hash(float2(hash3D(v.xyz), v.w));
}

float RayToViewDepth(float3 rayDir, float rayT)
{
    float cosTheta = dot(normalize(gScene.camera.data.cameraW), rayDir);
    return rayT * cosTheta;
}

float ViewDepthToRay(float3 rayDir, float viewDepth)
{
    float cosTheta = dot(normalize(gScene.camera.data.cameraW), rayDir);
    return viewDepth / cosTheta;    
}

uint2 pcg2d(uint2 v)
{
    v = v * 1664525u + 1013904223u;

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v >> 16u);

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v >> 16u);

    return v;
}

float2 randomJitter(uint2 pixel)
{
#if SD_JITTER
    uint2 rnd = pcg2d(pixel);
    return float2(rnd % 2048u) / 2048.0;
#else
    return float2(0.5);
#endif
}

RayDesc initRayDesc(uint2 pixel, uint2 dim)
{
    RayDesc ray = gScene.camera.computeRayPinhole(pixel, dim).toRayDesc();
    ray.Direction = normalize(gScene.camera.computeNonNormalizedRayDirPinhole(pixel, dim, randomJitter(pixel)));
    
    float epsilon = 0.1 * gScene.camera.data.nearZ; // small ray offset
    float depth = depthInTex.SampleLevel(S, (pixel + 0.5) / dim, 0);
    //float depth = depthInTex[pixel];
    ray.TMin = ViewDepthToRay(ray.Direction, depth) + epsilon; // start after first known hit

    if (USE_RAY_INTERVAL)
    {
        uint iRayMin = rayMinTex[pixel];
        if (iRayMin != 0u) // test if valid values
            ray.TMin = max(asfloat(iRayMin), ray.TMin);
    
        uint iRayMax = rayMaxTex[pixel];
        if (iRayMax != 0u) // test if valid values
            ray.TMax = min(asfloat(iRayMax), ray.TMax);
    }
    
    return ray;
}


// abstract:
#ifndef TEXTURE_LOD_T
#define TEXTURE_LOD_T ImplicitLodTextureSampler
#endif
TEXTURE_LOD_T computeLod(VertexData v, float3 rayDir);

// returns true if the ray sample can be commited
bool algorithm(inout float depths[NUM_SAMPLES],
#if SD_USE_NORMALS
inout uint normals[NUM_SAMPLES],
#endif
inout uint count, float2 barycentrics, float t, GeometryInstanceID instanceID, uint primitiveIndex, float3 rayDir)
{
#define SD_VERSION 2
#define MAX_COUNT (2 * NUM_SAMPLES)

    float rng = hash(barycentrics);

    // adjust t to view depth
    t = RayToViewDepth(rayDir, t); // convert to view depth
    if (NORMALIZE)
        t = saturate((t - gScene.camera.data.nearZ) / (gScene.camera.data.farZ - gScene.camera.data.nearZ));
    
#if IMPLEMENTATION == IMPLEMENTATION_COVERAGE_MASK
    int R = int(floor(ALPHA * NUM_SAMPLES + rng));
    //int R = 1.5 + rng;
    uint coverageMask = 0;
    
    if (R >= NUM_SAMPLES)
    {
        coverageMask = 0xffff; // maximum 32 samples
    }
    else if (R != 0)
    {
        float rng2 = hash3D(float3(barycentrics, t));
        int index = int(lerp(stratifiedIndices[R], stratifiedIndices[R + 1], rng2));
        coverageMask = stratifiedLookUpTable[index];
    }
#else // default
    uint slot = count; // insertion slot
    if (count >= NUM_SAMPLES)
        slot = uint(rng * count); // slot in [0, count - 1]
    
    count += 1;
    if (slot >= NUM_SAMPLES) // rejected?
    {
        if (count > MAX_COUNT)
            return true; // commit
        return false; // no commit, further traverses
    }

    // early depth test (if alpha hash)
    [unroll] for (uint i = 0; i < NUM_SAMPLES; ++i)
    {
        if (i == slot && depths[i] <= t)
            return false; // rejected due to depth test
    }

    #endif

    #if USE_ALPHA_TEST
    { // ALPHA test

        const uint materialID = gScene.getMaterialID(instanceID);
        bool alphaTest = gScene.materials.materialData[materialID].header.getAlphaMode() == AlphaMode::Mask;
        //bool alphaTest = (materialAlphaTestLookup[materialID / 32u] & (1u << (materialID % 32u))) != 0u; // not really faster
        
        // needs alpha testing?
        if (alphaTest)
        {
            TriangleHit hit;
            hit.instanceID = instanceID;
            hit.primitiveIndex = primitiveIndex;
            hit.barycentrics = barycentrics;
            
            const VertexData v = gScene.getVertexData(hit);
            if (gScene.materials.alphaTest(v, materialID, computeLod(v, rayDir)))  
                return false; // alpha test failed => ignore this triangle
        }
    }
    #endif

    

    #if SD_USE_NORMALS
    TriangleHit hit;
    hit.instanceID = instanceID;
    hit.primitiveIndex = primitiveIndex;
    hit.barycentrics = barycentrics;
            
    const VertexData v = gScene.getVertexData(hit);
    float3 viewNormal = mul(float3x3(gScene.camera.data.viewMat), v.faceNormalW);
    #endif
    
    #if IMPLEMENTATION == IMPLEMENTATION_COVERAGE_MASK


    float maxT = 0.0;
    [unroll]
    for (uint i = 0; i < NUM_SAMPLES; ++i)
    {
        if (coverageMask & (1 << i))
        {
            if(t < depths[i]) // z-test
            {
                depths[i] = t;
                SD_NORMALS(normals[i] = encodeNormal2x16(viewNormal));
            }
        }
        maxT = max(maxT, depths[i]);
    }

    if (t < maxT)
        return false; // keep looking for hits, otherwise start to terminate
    return true;

    #else // default

    for (uint i = 0; i < NUM_SAMPLES; ++i)
    {
        if (i == slot)
        {
            depths[i] = t;
            SD_NORMALS(normals[i] = encodeNormal2x16(viewNormal));
        }
            
    }

    if (count > MAX_COUNT)
        return true; // commit => max count reached
    return false; // further traverse

    //float rng2 = hash3D(float3(attribs.barycentrics, t));
    //if (rng2 < 0.2) // small chance to keep traversal going
    //if(rayData.count < 5)
    //    IgnoreHit(); 
#endif
}
