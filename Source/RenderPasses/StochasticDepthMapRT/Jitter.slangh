uint2 pcg2d(uint2 v)
{
    v = v * 1664525u + 1013904223u;

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v >> 16u);

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v >> 16u);

    return v;
}

// default sobol 2d sequence (offset by 0.125)
//static const float2 jitterPos[16] = { float2(0.125, 0.125), float2(0.375, 0.875), float2(0.625, 0.625), float2(0.875, 0.375), float2(0.875, 0.375), float2(0.625, 0.625), float2(0.375, 0.875), float2(0.125, 0.125), float2(0.625, 0.625), float2(0.875, 0.375), float2(0.125, 0.125), float2(0.375, 0.875), float2(0.375, 0.875), float2(0.125, 0.125), float2(0.875, 0.375), float2(0.625, 0.625) };
static const float2 jitterPos[16] = { float2(0.6483604982495308, 0.914070401340723), float2(0.7279119342565536, 0.1037941575050354), float2(0.48886989802122116, 0.699178121984005), float2(0.3848271369934082, 0.25951504334807396), float2(0.1555836834013462, 0.8020274639129639), float2(0.2205628715455532, 0.2412630058825016), float2(0.9962188489735126, 0.5846633277833462), float2(0.8776040785014629, 0.3954884633421898), float2(0.9271227307617664, 0.831196017563343), float2(0.9490576796233654, 0.14202157780528069), float2(0.20916065946221352, 0.5476771481335163), float2(0.16468944773077965, 0.4869129806756973), float2(0.43544455617666245, 0.9515445046126842), float2(0.44085410237312317, 0.011881716549396515), float2(0.7173641100525856, 0.6695209294557571), float2(0.6563677340745926, 0.35924511030316353), };
// compressed sobol 2d sequence (2 bits per component)
static const uint jitterCompressed[2] = { 0x0da77ad0, 0xa70dd07a };

// generated latin square (similar result as sobol)
//static const float2 jitterPos[16] = { float2(0.125, 0.125), float2(0.125, 0.375), float2(0.125, 0.625), float2(0.125, 0.875), float2(0.375, 0.125), float2(0.375, 0.375), float2(0.375, 0.625), float2(0.375, 0.875), float2(0.625, 0.125), float2(0.625, 0.375), float2(0.625, 0.625), float2(0.625, 0.875), float2(0.875, 0.125), float2(0.875, 0.375), float2(0.875, 0.625), float2(0.875, 0.875) };

float2 randomJitter(uint2 pixel)
{
    if (SD_JITTER)
    {
        //return frac(pixel * float2(0.41421356237, 0.73205080757)); // additive recurrence, very bad quality
        //uint2 rnd = pcg2d(pixel); // pcg random => worse quality, bad stratification
        //return float2(rnd % 2048u) / 2048.0;
        uint2 block = pixel / 4u;
        pixel = pixel % 4u;
        uint index = pixel.y * 4 + pixel.x;

        // compressed lookup (not faster on my hardware, but maybe on other hardware? same speed as uncrompressed for me)
        /*uint integer_value = jitterCompressed[index / 8u]; // 8 points per uint
        uint point_offset = index % 8u;
        return float2(0.125 + 0.25 * uint2(
            (integer_value >> (2u * 2u * point_offset)) & 0x3u,
            (integer_value >> (2u * (2u * point_offset + 1u))) & 0x3u
        ));*/
        
        return jitterPos[index];
        // return frac(jitterPos[index] + block * float2(0.41421356237, 0.73205080757)); // additive recurrence (no quality difference, so we take simple lookup instead)
    }
    return float2(0.5);
}
