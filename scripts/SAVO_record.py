from pathlib import WindowsPath, PosixPath
from falcor import *

def render_graph_g():
    g = RenderGraph('g')
    g.create_pass('GBufferRaster', 'GBufferRaster', {'outputSize': 'Default', 'samplePattern': 'Center', 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': 'Back'})
    g.create_pass('ForwardLighting', 'ForwardLighting', {'envMapIntensity': 1.0, 'ambientIntensity': 0.5, 'lightIntensity': 0.5})
    g.create_pass('LinearizeDepth', 'LinearizeDepth', {'depthFormat': 'R32Float'})
    g.create_pass('Ambient', 'ImageEquation', {'formula': 'I0[xy].rrra', 'format': 'RGBA32Float'})
    g.create_pass('EnvMapPass', 'EnvMapPass', {})
    g.create_pass('RayShadow', 'RayShadow', {})
    g.create_pass('SVAO', 'SVAO', {'radius': 0.20000000298023224, 'primaryDepthMode': 'SingleDepth', 'secondaryDepthMode': 'Raytraced', 'exponent': 2.0, 'rayPipeline': True, 'thickness': 0.0, 'stochMapDivisor': 1, 'dualAO': False, 'alphaTest': True})
    g.create_pass('DepthPeeling', 'DepthPeeling', {'cullMode': 'Back', 'depthFormat': 'D32Float', 'minSeparationDistance': 0.5})
    g.create_pass('LinearizeDepth0', 'LinearizeDepth', {'depthFormat': 'R32Float'})
    g.create_pass('GuardBand', 'GuardBand', {'guardBand': 64})
    g.create_pass('ToneMapper', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('DeinterleaveRef', 'DeinterleaveTexture', {})
    g.create_pass('DeinterleaveDark', 'DeinterleaveTexture', {})
    g.create_pass('SVAO_ref', 'SVAO', {'radius': 0.20000000298023224, 'primaryDepthMode': 'SingleDepth', 'secondaryDepthMode': 'Raytraced', 'exponent': 2.0, 'rayPipeline': True, 'thickness': 0.0, 'stochMapDivisor': 1, 'dualAO': False, 'alphaTest': True})
    g.create_pass('DeinterleaveBright', 'DeinterleaveTexture', {})
    g.create_pass('DeinterleaveDepth', 'DeinterleaveTexture', {})
    g.create_pass('DeinterleaveDepthInv', 'DeinterleaveTexture', {})
    g.create_pass('ImageEquationLinearDepth', 'ImageEquation', {'formula': 'I0[xy]/1000.0', 'format': 'R32Float'})
    g.create_pass('ImageEquationDepthInv', 'ImageEquation', {'formula': 'I0[xy]', 'format': 'R32Float'})
    g.create_pass('VAOExport', 'VAOExport', {})
    g.create_pass('ConvolutionalNet', 'ConvolutionalNet', {})
    g.create_pass('InterleaveTexture', 'InterleaveTexture', {})
    g.create_pass('AmbientNet', 'ImageEquation', {'formula': 'I0[xy].rrra', 'format': 'RGBA32Float'})
    g.create_pass('CrossBilateralBlur', 'CrossBilateralBlur', {})
    g.create_pass('CrossBilateralBlurOriginal', 'CrossBilateralBlur', {})
    g.create_pass('DiffuseNet', 'ImageEquation', {'formula': 'I0[xy].r * I1[xy]', 'format': 'RGBA32Float'})
    g.create_pass('Diffuse', 'ImageEquation', {'formula': 'I0[xy].r * I1[xy]', 'format': 'RGBA32Float'})
    g.create_pass('ImageEquation1', 'ImageEquation', {'formula': '1.0 - max(I0[xy].x-I0[xy].y, 0.05)', 'format': 'R8Unorm'})
    g.create_pass('DeinterleaveTexture', 'DeinterleaveTexture', {})
    g.create_pass('PathRecorder', 'PathRecorder', {})
    g.create_pass('AOGuidedBlur', 'AOGuidedBlur', {'kernelRadius': 2, 'clampResults': True, 'enabled': True})
    g.create_pass('CrossBilateralBlurBL', 'CrossBilateralBlur', {})
    g.create_pass('InterleaveTexture0', 'InterleaveTexture', {})
    g.create_pass('AmbientBilateral', 'ImageEquation', {'formula': 'I0[xy].rrra', 'format': 'RGBA32Float'})
    g.create_pass('DiffuseBilateral', 'ImageEquation', {'formula': 'I0[xy].r * I1[xy]', 'format': 'RGBA32Float'})
    g.create_pass('AOVarianceFix', 'AOVarianceFix', {})
    g.create_pass('InterleaveTexture1', 'InterleaveTexture', {})
    g.create_pass('CrossBilateralBlurVar', 'CrossBilateralBlur', {})
    g.create_pass('AmbientVar', 'ImageEquation', {'formula': 'I0[xy].rrra', 'format': 'RGBA32Float'})
    g.create_pass('DiffuseVar', 'ImageEquation', {'formula': 'I0[xy].r * I1[xy]', 'format': 'RGBA32Float'})
    g.create_pass('DeinterleaveBrightDark', 'DeinterleaveTexture', {})
    g.create_pass('CrossBilateralBlur0', 'CrossBilateralBlur', {})
    g.create_pass('DiffuseRef', 'ImageEquation', {'formula': 'I0[xy].r * I1[xy]', 'format': 'RGBA32Float'})
    g.create_pass('AmbientRef', 'ImageEquation', {'formula': 'I0[xy].rrra', 'format': 'RGBA32Float'})
    g.create_pass('ExtractDark', 'ImageEquation', {'formula': 'I0[xy].gggg', 'format': 'R8Unorm'})
    g.create_pass('ExtractBright', 'ImageEquation', {'formula': 'I0[xy].xxxx', 'format': 'R8Unorm'})
    g.create_pass('CompressNormals', 'CompressNormals', {'viewSpace': True, 'use16Bit': True})
    g.add_edge('CrossBilateralBlurBL.colorOut', 'AmbientBilateral.I0')
    g.add_edge('GBufferRaster.depth', 'ForwardLighting.depth')
    g.add_edge('EnvMapPass.color', 'ForwardLighting.color')
    g.add_edge('RayShadow.visibility', 'ForwardLighting.visibilityBuffer')
    g.add_edge('GBufferRaster.posW', 'RayShadow.posW')
    g.add_edge('GBufferRaster.faceNormalW', 'RayShadow.normalW')
    g.add_edge('GBufferRaster.depth', 'EnvMapPass.depth')
    g.add_edge('GBufferRaster.depth', 'LinearizeDepth.depth')
    g.add_edge('DepthPeeling.depth2', 'LinearizeDepth0.depth')
    g.add_edge('LinearizeDepth.linearDepth', 'SVAO.depth')
    g.add_edge('LinearizeDepth.linearDepth', 'SVAO_ref.depth')
    g.add_edge('LinearizeDepth0.linearDepth', 'SVAO.depth2')
    g.add_edge('LinearizeDepth0.linearDepth', 'SVAO_ref.depth2')
    g.add_edge('GBufferRaster.depth', 'SVAO_ref.gbufferDepth')
    g.add_edge('GBufferRaster.depth', 'SVAO.gbufferDepth')
    g.add_edge('ToneMapper.dst', 'SVAO.color')
    g.add_edge('ToneMapper.dst', 'SVAO_ref.color')
    g.add_edge('GuardBand', 'GBufferRaster')
    g.add_edge('ForwardLighting.color', 'ToneMapper.src')
    g.add_edge('LinearizeDepth.linearDepth', 'ImageEquationLinearDepth.I0')
    g.add_edge('ImageEquationLinearDepth.out', 'DeinterleaveDepth.texIn')
    g.add_edge('DeinterleaveDark.texOut', 'VAOExport.dark')
    g.add_edge('DeinterleaveDepth.texOut', 'VAOExport.depth')
    g.add_edge('GBufferRaster.depth', 'ImageEquationDepthInv.I0')
    g.add_edge('ImageEquationDepthInv.out', 'DeinterleaveDepthInv.texIn')
    g.add_edge('DeinterleaveDepthInv.texOut', 'VAOExport.invDepth')
    g.add_edge('DeinterleaveBright.texOut', 'VAOExport.bright')
    g.add_edge('SVAO_ref.ao', 'DeinterleaveRef.texIn')
    g.add_edge('DeinterleaveRef.texOut', 'VAOExport.ref')
    g.add_edge('DeinterleaveBright.texOut', 'ConvolutionalNet.bright')
    g.add_edge('DeinterleaveDark.texOut', 'ConvolutionalNet.dark')
    g.add_edge('ConvolutionalNet.out', 'InterleaveTexture.texIn')
    g.add_edge('InterleaveTexture.texOut', 'CrossBilateralBlur.color')
    g.add_edge('CrossBilateralBlur.colorOut', 'AmbientNet.I0')
    g.add_edge('LinearizeDepth.linearDepth', 'CrossBilateralBlur.linear depth')
    g.add_edge('SVAO.ao', 'CrossBilateralBlurOriginal.color')
    g.add_edge('CrossBilateralBlurOriginal.colorOut', 'Ambient.I0')
    g.add_edge('LinearizeDepth.linearDepth', 'CrossBilateralBlurOriginal.linear depth')
    g.add_edge('CrossBilateralBlur.colorOut', 'DiffuseNet.I0')
    g.add_edge('ToneMapper.dst', 'DiffuseNet.I1')
    g.add_edge('ToneMapper.dst', 'Diffuse.I1')
    g.add_edge('CrossBilateralBlurOriginal.colorOut', 'Diffuse.I0')
    g.add_edge('VAOExport', 'CrossBilateralBlur')
    g.add_edge('VAOExport', 'CrossBilateralBlurOriginal')
    g.add_edge('SVAO.ao', 'ImageEquation1.I0')
    g.add_edge('ImageEquation1.out', 'DeinterleaveTexture.texIn')
    g.add_edge('DeinterleaveTexture.texOut', 'ConvolutionalNet.importance')
    g.add_edge('DeinterleaveDepth.texOut', 'ConvolutionalNet.depth')
    g.add_edge('PathRecorder', 'GBufferRaster')
    g.add_edge('DeinterleaveBrightDark.texOut', 'AOGuidedBlur.ao2')
    g.add_edge('DeinterleaveDepth.texOut', 'AOGuidedBlur.lineardepth')
    g.add_edge('AOGuidedBlur.color', 'InterleaveTexture0.texIn')
    g.add_edge('InterleaveTexture0.texOut', 'CrossBilateralBlurBL.color')
    g.add_edge('LinearizeDepth.linearDepth', 'CrossBilateralBlurBL.linear depth')
    g.add_edge('CrossBilateralBlurBL.colorOut', 'DiffuseBilateral.I0')
    g.add_edge('ToneMapper.dst', 'DiffuseBilateral.I1')
    g.add_edge('CrossBilateralBlurBL', 'CrossBilateralBlurOriginal')
    g.add_edge('DeinterleaveBright.texOut', 'AOVarianceFix.bright')
    g.add_edge('DeinterleaveDark.texOut', 'AOVarianceFix.dark')
    g.add_edge('DeinterleaveDepth.texOut', 'AOVarianceFix.lineardepth')
    g.add_edge('AOVarianceFix.color', 'InterleaveTexture1.texIn')
    g.add_edge('InterleaveTexture1.texOut', 'CrossBilateralBlurVar.color')
    g.add_edge('LinearizeDepth.linearDepth', 'CrossBilateralBlurVar.linear depth')
    g.add_edge('CrossBilateralBlurVar', 'CrossBilateralBlurOriginal')
    g.add_edge('CrossBilateralBlurVar.colorOut', 'AmbientVar.I0')
    g.add_edge('CrossBilateralBlurVar.colorOut', 'DiffuseVar.I0')
    g.add_edge('ToneMapper.dst', 'DiffuseVar.I1')
    g.add_edge('SVAO_ref.ao', 'CrossBilateralBlur0.color')
    g.add_edge('LinearizeDepth.linearDepth', 'CrossBilateralBlur0.linear depth')
    g.add_edge('DeinterleaveRef', 'CrossBilateralBlur0')
    g.add_edge('CrossBilateralBlur0.colorOut', 'DiffuseRef.I0')
    g.add_edge('ToneMapper.dst', 'DiffuseRef.I1')
    g.add_edge('CrossBilateralBlur0.colorOut', 'AmbientRef.I0')
    g.add_edge('ExtractDark.out', 'DeinterleaveDark.texIn')
    g.add_edge('SVAO.ao', 'ExtractDark.I0')
    g.add_edge('ExtractBright.out', 'DeinterleaveBright.texIn')
    g.add_edge('SVAO.ao', 'ExtractBright.I0')
    g.add_edge('SVAO.ao', 'DeinterleaveBrightDark.texIn')
    g.add_edge('LinearizeDepth.linearDepth', 'DepthPeeling.linearZ')
    g.add_edge('GBufferRaster.faceNormalW', 'CompressNormals.normalW')
    g.add_edge('CompressNormals.normalOut', 'SVAO_ref.normals')
    g.add_edge('CompressNormals.normalOut', 'SVAO.normals')
    g.mark_output('Ambient.out')
    g.mark_output('AmbientNet.out')
    g.mark_output('AmbientBilateral.out')
    g.mark_output('AmbientVar.out')
    g.mark_output('AmbientRef.out')
    g.mark_output('Diffuse.out')
    g.mark_output('DiffuseNet.out')
    g.mark_output('DiffuseBilateral.out')
    g.mark_output('DiffuseVar.out')
    g.mark_output('DiffuseRef.out')
    g.mark_output('VAOExport.dummy')
    g.mark_output('GBufferRaster.faceNormalW')
    return g

g = render_graph_g()
try: m.addGraph(g)
except NameError: None
