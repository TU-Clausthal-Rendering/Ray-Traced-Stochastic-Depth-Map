from pathlib import WindowsPath, PosixPath
from falcor import *

def render_graph_SVAO():
    g = RenderGraph('SVAO')
    g.create_pass('GBufferRaster', 'GBufferRaster', {'outputSize': 'Default', 'samplePattern': 'Center', 'sampleCount': 8, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': 'Back'})
    g.create_pass('LinearizeDepth', 'LinearizeDepth', {'depthFormat': 'R32Float'})
    g.create_pass('RayShadow', 'RayShadow', {})
    g.create_pass('DepthPeeling', 'DepthPeeling', {'cullMode': 'Back', 'depthFormat': 'D32Float', 'minSeparationDistance': 0.009999999776482582})
    g.create_pass('GuardBand', 'GuardBand', {'guardBand': 64})
    g.create_pass('ToneMapper', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Linear', 'clamp': False, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('SVAO', 'SVAO', {'radius': 0.20000000298023224, 'primaryDepthMode': 'SingleDepth', 'secondaryDepthMode': 'StochasticDepth', 'exponent': 2.0, 'rayPipeline': True, 'thickness': 0.0, 'stochMapDivisor': 4, 'dualAO': False, 'alphaTest': True})
    g.create_pass('CrossBilateralBlur0', 'CrossBilateralBlur', {})
    g.create_pass('Shaded', 'ImageEquation', {'formula': 'I0[xy].r * I1[xy]', 'format': 'RGBA32Float'})
    g.create_pass('AmbientOcclusion', 'ImageEquation', {'formula': 'I0[xy].rrra', 'format': 'RGBA32Float'})
    g.create_pass('ShadedTAA', 'TAA', {'alpha': 0.10000000149011612, 'colorBoxSigma': 0.5, 'antiFlicker': True})
    g.create_pass('AmbientOcclusionTAA', 'TAA', {'alpha': 0.10000000149011612, 'colorBoxSigma': 1.0, 'antiFlicker': True})
    g.create_pass('ForwardLighting', 'ForwardLighting', {'envMapIntensity': 0.25, 'ambientIntensity': 0.25, 'lightIntensity': 0.5, 'envMapMirror': False})
    g.create_pass('EnvMapPass', 'EnvMapPass', {})
    g.create_pass('CompressNormals', 'CompressNormals', {'viewSpace': True, 'use16Bit': True})
    g.create_pass('LinearizeDepth0', 'LinearizeDepth', {'depthFormat': 'R32Float'})
    g.create_pass('DebugStochasticDepth', 'DebugStochasticDepth', {})
    g.add_edge('GBufferRaster.posW', 'RayShadow.posW')
    g.add_edge('GBufferRaster.normW', 'RayShadow.normalW')
    g.add_edge('GBufferRaster.depth', 'LinearizeDepth.depth')
    g.add_edge('GBufferRaster.depth', 'SVAO.gbufferDepth')
    g.add_edge('ToneMapper.dst', 'SVAO.color')
    g.add_edge('LinearizeDepth.linearDepth', 'DepthPeeling.linearZ')
    g.add_edge('GuardBand', 'GBufferRaster')
    g.add_edge('SVAO.ao', 'CrossBilateralBlur0.color')
    g.add_edge('LinearizeDepth.linearDepth', 'CrossBilateralBlur0.linear depth')
    g.add_edge('ToneMapper.dst', 'Shaded.I1')
    g.add_edge('Shaded.out', 'ShadedTAA.colorIn')
    g.add_edge('AmbientOcclusion.out', 'AmbientOcclusionTAA.colorIn')
    g.add_edge('GBufferRaster.mvec', 'AmbientOcclusionTAA.motionVecs')
    g.add_edge('GBufferRaster.mvec', 'ShadedTAA.motionVecs')
    g.add_edge('GBufferRaster.depth', 'ForwardLighting.depth')
    g.add_edge('GBufferRaster.depth', 'EnvMapPass.depth')
    g.add_edge('EnvMapPass.color', 'ForwardLighting.color')
    g.add_edge('ForwardLighting.color', 'ToneMapper.src')
    g.add_edge('GBufferRaster.faceNormalW', 'CompressNormals.normalW')
    g.add_edge('RayShadow.visibility', 'ForwardLighting.visibilityBuffer')
    g.add_edge('DepthPeeling.depth2', 'LinearizeDepth0.depth')
    g.add_edge('LinearizeDepth0.linearDepth', 'SVAO.depth2')
    g.add_edge('CompressNormals.normalOut', 'SVAO.normals')
    g.add_edge('LinearizeDepth.linearDepth', 'SVAO.depth')
    g.add_edge('CrossBilateralBlur0.colorOut', 'Shaded.I0')
    g.add_edge('CrossBilateralBlur0.colorOut', 'AmbientOcclusion.I0')
    g.add_edge('AmbientOcclusion.out', 'DebugStochasticDepth.in')
    g.add_edge('GBufferRaster.depth', 'DebugStochasticDepth.depth')
    g.mark_output('ShadedTAA.colorOut')
    g.mark_output('AmbientOcclusionTAA.colorOut')
    g.mark_output('Shaded.out')
    g.mark_output('AmbientOcclusion.out')
    g.mark_output('DebugStochasticDepth.out')
    return g

SVAO = render_graph_SVAO()
try: m.addGraph(SVAO)
except NameError: None
